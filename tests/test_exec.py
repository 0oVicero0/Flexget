from tests import FlexGetBase
import os
import os.path
from tests.util import maketemp


class TestExec(FlexGetBase):

    __yaml__ = """
        presets:
          global:
            set:
              temp_dir: autogenerated in setup()
            accept_all: yes
        feeds:
          replace_from_entry:
            mock:
              - {title: 'replace'}
              - {title: 'replace with spaces'}
            exec: python tests/exec.py %(temp_dir)s %(title)s
    """
    
    def __init__(self):
        self.test_home = None
        FlexGetBase.__init__(self)

    def setup(self):
        FlexGetBase.setup(self)
        # generate config
        self.test_home = maketemp()
        self.manager.config['presets']['global']['set']['temp_dir'] = self.test_home
        
    def teardown(self):
        import shutil
        shutil.rmtree(self.test_home)
        FlexGetBase.teardown(self)

    def test_replace_from_entry(self):
        self.execute_feed('replace_from_entry')
        assert len(self.feed.accepted) == 2, "not all entries were accepted"
        for entry in self.feed.accepted:
            assert os.path.exists(os.path.join(self.test_home, entry['title'])), "exec.py did not create a file for %s" % entry['title']
