from tests import FlexGetBase
import os
import os.path
from tests.util import maketemp


class TestExistsSeries(FlexGetBase):

    __yaml__ = """
        feeds:
          test:
            mock:
              - {title: 'Foo.Bar.S01E02.XViD'}
              - {title: 'Foo.Bar.S01E03.XViD'}
            series:
              - foo bar
            exists_series:
              path: autogenerated in setup()
            
          test_diff_qualities_allowed:
            mock:
              - {title: 'Asdf.S01E02.720p'}
            series:
              - asdf
            exists_series:
              path:  path autogenerated in setup()
              accept_qualities: yes

          test_diff_qualities_not_allowed:
            mock:
              - {title: 'Asdf.S01E02.720p'}
            series:
              - asdf
            exists_series: path autogenerated in setup()
            
          test_propers:
            mock:
              - {title: 'Mock.S01E01.Proper'}
              - {title: 'Test.S01E01'}
            series:
              - mock
              - test
            exists_series: path autogenerated in setup()

          test_invalid:
            mock:
              - {title: 'Invalid.S01E01'}
            series:
              - invalid
            exists_series: path autogenerated in setup()
    """

    test_dirs = ['Foo.Bar.S01E02.XViD-GrpA', 'Asdf.S01E02.HDTV', 'Mock.S01E01.XViD', \
        'Test.S01E01.Proper', 'invalid']
    
    def __init__(self):
        self.test_home = None
        FlexGetBase.__init__(self)

    def setup(self):
        FlexGetBase.setup(self)
        # generate config
        self.test_home = maketemp()
        for feed_name in self.manager.config['feeds'].iterkeys():
            if isinstance(self.manager.config['feeds'][feed_name]['exists_series'], dict):
                self.manager.config['feeds'][feed_name]['exists_series']['path'] = self.test_home
            else:
                self.manager.config['feeds'][feed_name]['exists_series'] = self.test_home
        # create test dirs
        for dir in self.test_dirs:
            os.mkdir(os.path.join(self.test_home, dir))
        
    def teardown(self):
        for dir in self.test_dirs:
            os.rmdir(os.path.join(self.test_home, dir))
        os.rmdir(self.test_home)
        FlexGetBase.teardown(self)

    def test_existing(self):
        """Exists_series plugin: existing"""
        self.execute_feed('test')
        assert not self.feed.find_entry('accepted', title='Foo.Bar.S01E02.XViD'), \
            'Foo.Bar.S01E02.XViD should not have been accepted (exists)'
        assert self.feed.find_entry('accepted', title='Foo.Bar.S01E03.XViD'), \
            'Foo.Bar.S01E03.XViD should have been accepted'
            
    def test_diff_qualities_allowed(self):
        """Exists_series plugin: existsting but w. diff quality"""
        self.execute_feed('test_diff_qualities_allowed')
        assert self.feed.find_entry('accepted', title='Asdf.S01E02.720p'), \
            'Asdf.S01E02.720p should have been accepted'

    def test_diff_qualities_not_allowed(self):
        """Exists_series plugin: existsting but w. diff quality"""
        self.execute_feed('test_diff_qualities_not_allowed')
        assert self.feed.find_entry('rejected', title='Asdf.S01E02.720p'), \
            'Asdf.S01E02.720p should have been rejected'
            
    def test_propers(self):
        """Exists_series plugin: new proper & proper already exists"""
        self.execute_feed('test_propers')
        assert self.feed.find_entry('accepted', title='Mock.S01E01.Proper'), \
            'new proper not accepted'
        assert self.feed.find_entry('rejected', title='Test.S01E01'), \
            'pre-existin proper should have caused reject'            

    def test_invalid(self):
        """Exists_series plugin: no episode numbering on the disk"""
        # shouldn't raise anything
        self.execute_feed('test_invalid')
